{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","padding","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","hour","Date","getHours","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","then","response","json","users","catch","document","title","filteredRobots","filter","robot","toLowerCase","includes","length","time","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7d4e83d1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id }) => {\n\treturn (\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src={`https://robohash.org/${id}?150x150`} alt='robot'/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t{\n\t\t\trobots.map((user, i) =>{\n\t\t\t\treturn (\n\t\t\t\t\t<Card \n\t\t\t\t\tkey={i} \n\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\tname={robots[i].name}  \n\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t} \n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react'\n\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input type='search' \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\tplaceholder=\"Search Robots\"\n\t\t\tonChange={searchChange}/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox; ","import React from 'react'\n\nconst Scroll = (props) => {\n\tconsole.log(props);\n\treturn (\n\t\t<div style={{ \n\t\t\t\toverflowY: 'scroll',\n\t\t\t\tborder: '0px solid green',\n\t\t\t\theight: '700px',\n\t\t\t\tpadding: '11px'\n\t\t\t\t}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n\tconstructor() { \n\t\tsuper();\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\n\tcomponentDidCatch(error, info) { \n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender() {\n\t\tif(this.state.hasError) {\n\t\t\treturn <h1>An error occured.</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport { robots } from '../robots'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css'\nclass App extends Component { \n\tconstructor() {\n\t\tsuper()\n\t\tconst today = new Date();\n\t\tconst hour = today.getHours();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: '',\n\t\t\thour: hour\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users',\n\t\t\t{\n\t\t    method: 'GET', // *GET, POST, PUT, DELETE, etc.\n\t\t    mode: 'no-cors', // no-cors, *cors, same-origin\n\t\t    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n\t\t    credentials: 'same-origin', // include, *same-origin, omit\n\t\t    headers: {\n\t\t      'Content-Type': 'application/json'\n\t\t      // 'Content-Type': 'application/x-www-form-urlencoded',\n\t\t    },\n\t\t    redirect: 'follow', // manual, *follow, error\n\t\t    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n\t\t  })\n\t\t.then(response=> response.json())\n\t\t\t.then(users => this.setState({ robots: users}))\n\t\t\t.catch(function(error) {\n\t\t\t  console.log('Looks like there was a problem: \\n', error);\n\t\t\t});\n\t\t}\n\n\tonSearchChange = (event) => { \n\t\tthis.setState({ searchfield: event.target.value })\n\t}\n\n\trender() {\n\t\tdocument.title = 'RoboFriends'\n\t\tconst filteredRobots = this.state.robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t})\n\t\tif(this.state.robots.length === 0 ){\n\t\t\treturn <h1 className=\"tc\">Loading...</h1>\n\t\t} else {\n\t\t\t\treturn !filteredRobots.length ? \n\t\t\t\t\t(\n\t\t\t\t\t\t<div className='tc'>\n\t\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t\t<h1 className='f1'>{this.state.time}</h1>\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t\t\t<h1 className='tc f3'>No robots found.</h1>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) :\n\t\t\t\t\t(\n\t\t\t\t\t\t<div className='tc'>\n\t\t\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t\t\t<p className='f2'>{this.state.hour > 15 ? 'Good evening!' : 'Good day!'} </p>\n\t\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\t}\n\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n\t\t  <App />\n  ,  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}